// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');

contract('TestSquareVerifier', accounts => {

    const account_one = accounts[0];

    // - use the contents from proof.json generated from zokrates steps
    let verifierInput = {
        "proof":
            {
                "a":["0x1a9c92db96fd19897f7cd12603345b538d5b2d90dff5ad1edd042236cf635ad5", "0x2a83ae5c4a2cdc1c13522bdafa56ff2fbecfd28e876730dcbfaf654637f8436c"],
                "a_p":["0x054e6537937216e222b0c8b3770da619b0849a7965a162c5459e9cde9f68648c", "0x05d288cf6a12e31496e8c9464e7b04bd3890d3ae791cd4993a90d5773cd99441"],
                "b":
                    [["0x063d9a45fcba1345e35832600692d844a9265d298069b2dd30f9e3385eaaa340", "0x253453c0423214dd01d2afd90ada5f272521f3f19bb9719e43d2293614ae7337"], ["0x02dedf622bc342fe1b9fecfc05f6efbccb29c131445ea6c29022c96af9d1781a", "0x08cc0137c90b661dfe7be314c319fee774c223ff8bcd2250a09993f0a5569632"]],

                "b_p":["0x1369549c4f68e3977e96dd3f63fe174b015a1e2346d72bdfe35215f873e72085", "0x2cacb655f4a293827c1548ff9644bdb9fcba7adf409652b6f158d20aecf5fb1c"],
                "c":["0x08c727c4e6c655eea4046b82c03bcf2cdd3f984a17bc7fda5cc0030144f7713a", "0x2d799f6732ec5489fce6793fe2081e0971fad6377f783c926dec8b883949af0c"],
                "c_p":["0x2246e5b228e048d3be3631d6658ba486d243e5eae3dd43917ae083fe846f5ba7", "0x0b08f318aa0ea0f3bba8207e32efee3ade3f47a2034e758e39021ba171847fb2"],
                "h":["0x010477773e776c3781ff619312d03499e9a6abad95634ff5c85956f0b58ab94e", "0x1a6bb97ba9bccd923b4d80da36dca0bdd2507588072e38c5072276bf27f67eca"],
                "k":["0x0b2d1daae1156ab3a27aba80f7ff46eec9290406d069af1faa5b46cb049e6d78", "0x1af9f2d240f136e0c70b077394bf521ea3868fd8ba85f72a4bc5e53bbfd8910f"]
            },
        "inputs":["0x0000000000000000000000000000000000000000000000000000000000000009","0x0000000000000000000000000000000000000000000000000000000000000001"]
    }

    describe('Test verification', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({from: account_one});
        })

        // Test verification with correct proof
        it('Test verification with correct proof', async function () {
            let verificationResult = await this.contract.verifyTx.call(
                verifierInput.proof.a,
                verifierInput.proof.a_p,
                verifierInput.proof.b,
                verifierInput.proof.b_p,
                verifierInput.proof.c,
                verifierInput.proof.c_p,
                verifierInput.proof.h,
                verifierInput.proof.k,
                verifierInput.inputs,
                {from: account_one}
            );
            assert.equal(verificationResult, true, "Verification with correct proof was unsuccessful");
        })

        // Test verification with correct proof
        it('Test verification with incorrect proof', async function () {
            let incorrectInputs = ["0x000000000000000000000000000000000000000000000000000000000000008","0x0000000000000000000000000000000000000000000000000000000000000001"]

            let verificationResult = await this.contract.verifyTx.call(
                verifierInput.proof.a,
                verifierInput.proof.a_p,
                verifierInput.proof.b,
                verifierInput.proof.b_p,
                verifierInput.proof.c,
                verifierInput.proof.c_p,
                verifierInput.proof.h,
                verifierInput.proof.k,
                incorrectInputs,
                {from: account_one}
            );

            assert.equal(verificationResult, false, "Verification with incorrect proof was successful");
        })
    });
})